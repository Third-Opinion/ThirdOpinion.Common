name: CI/CD Pipeline

# Triggers:
# - Push to main/master: Full CI/CD (build, test, package, publish stable to GitHub Packages)
# - Push to develop: Full CI/CD (build, test, package, publish pre-release to GitHub Packages)
# - Push to feature branches: Build and test only
# - Pull requests: Build and test
# - Releases: Full pipeline with stable release publishing to GitHub Packages
# - Manual dispatch: Optional functional tests and package publishing

on:
  push:
    branches: [ main, master, develop, 'feature/**' ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      run_functional_tests:
        description: 'Run functional tests'
        required: false
        default: false
        type: boolean
      publish_packages:
        description: 'Publish NuGet packages'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: './ThirdOpinion.Common.sln'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run unit tests
      run: |
        # Run miscellaneous unit tests
        dotnet test ThirdOpinion.Common.Misc.UnitTests/ThirdOpinion.Common.Misc.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./test-results/

        # Run FHIR unit tests
        dotnet test ThirdOpinion.Common.Fhir.UnitTests/ThirdOpinion.Common.Fhir.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./test-results/

        # Run AWS unit tests (may fail but still produce results)
        dotnet test ThirdOpinion.Common.Aws.UnitTests/ThirdOpinion.Common.Aws.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./test-results/ || echo "AWS tests failed but continuing with results"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./test-results/


    - name: Comment PR with test results
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('./test-results/*.trx') != ''
      with:
        name: Unit Tests
        path: './test-results/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_functional_tests == 'true' || github.event_name == 'workflow_dispatch'
    needs: build-and-test
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_FUNCTIONAL_TEST_ROLE_ARN }}
        role-session-name: GitHubActions-FunctionalTests
        aws-region: us-east-1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run functional tests
      env:
        AWS__Region: us-east-1
        TestSettings__TestResourcePrefix: gh-actions
      run: |
        dotnet test ThirdOpinion.Common.FunctionalTests/ThirdOpinion.Common.FunctionalTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./functional-test-results/

    - name: Upload functional test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: functional-test-results
        path: ./functional-test-results/

  package:
    name: Create NuGet Packages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_packages == 'true') ||
      (github.ref_name == 'main' || github.ref_name == 'master' || github.ref_name == 'develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Determine version
      id: version
      run: |
        # Read base version from project file
        BASE_VERSION=$(grep -oP '<Version>\K[^<]+' src/ThirdOpinion.Common.csproj || echo "1.0.0")
        RUN_NUMBER=${{ github.run_number }}

        echo "Base version from project file: $BASE_VERSION"

        # Determine final version based on trigger and branch
        if [ "${{ github.event_name }}" == "release" ]; then
          # For releases, use the git tag version
          VERSION=${{ github.event.release.tag_name }}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "version_source=release_tag" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_name }}" == "develop" ]; then
          # For develop branch, use base version with beta suffix
          VERSION="${BASE_VERSION}-beta.${RUN_NUMBER}"
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_source=auto_develop" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == feature/* ]]; then
          # For feature branches, use base version with alpha suffix
          BRANCH_SAFE=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | cut -c1-20)
          VERSION="${BASE_VERSION}-alpha.${RUN_NUMBER}.${BRANCH_SAFE}"
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_source=auto_feature" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "master" ]; then
          # For main/master, check if base version should be incremented
          if [ "$BASE_VERSION" == "1.0.0" ]; then
            # Use auto-increment for main if still on default version
            VERSION="1.0.${RUN_NUMBER}"
            echo "version_source=auto_main" >> $GITHUB_OUTPUT
          else
            # Use base version from project file for manual releases
            VERSION="$BASE_VERSION"
            echo "version_source=manual_main" >> $GITHUB_OUTPUT
          fi
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        else
          # For other branches, use base version with branch suffix
          BRANCH_SAFE=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | cut -c1-20)
          VERSION="${BASE_VERSION}-${BRANCH_SAFE}.${RUN_NUMBER}"
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_source=auto_other" >> $GITHUB_OUTPUT
        fi

        # Validate semantic versioning format (basic check)
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\-[a-zA-Z0-9\.\-]+)?$ ]]; then
          echo "Warning: Version '$VERSION' may not follow semantic versioning"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
        echo "Package version will be: $VERSION"
        echo "Version source: $(cat $GITHUB_OUTPUT | grep version_source | cut -d'=' -f2)"

    - name: Update project versions
      run: |
        VERSION=${{ steps.version.outputs.version }}
        BASE_VERSION=${{ steps.version.outputs.base_version }}
        VERSION_SOURCE=${{ steps.version.outputs.version_source }}

        echo "Updating project version:"
        echo "  Base version: $BASE_VERSION"
        echo "  Final version: $VERSION"
        echo "  Version source: $VERSION_SOURCE"

        # Update the main project version
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" src/ThirdOpinion.Common.csproj

        # For assembly versions, use the base version (without pre-release suffixes)
        # Extract major.minor.patch from version (remove pre-release suffix)
        ASSEMBLY_VERSION=$(echo "$VERSION" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+' || echo "$BASE_VERSION")
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$ASSEMBLY_VERSION.0<\/AssemblyVersion>/g" src/ThirdOpinion.Common.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$ASSEMBLY_VERSION.0<\/FileVersion>/g" src/ThirdOpinion.Common.csproj

        echo "Updated ThirdOpinion.Common package version to: $VERSION"
        echo "Updated assembly versions to: $ASSEMBLY_VERSION.0"

        # Show the updated project file version section for verification
        echo "Updated project file version section:"
        grep -A2 -B2 "<Version>" src/ThirdOpinion.Common.csproj || echo "Could not find version in project file"

    - name: Build sub-projects first
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Pack NuGet package
      run: |
        dotnet pack src/ThirdOpinion.Common.csproj \
          --configuration Release \
          --output ./packages/ \
          -p:Version=${{ steps.version.outputs.version }}

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

    - name: List generated packages
      run: |
        echo "Generated packages:"
        ls -la ./packages/
        echo "Expected package: ThirdOpinion.Common.${{ steps.version.outputs.version }}.nupkg"

  publish:
    name: Publish to AWS CodeArtifact
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: |
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_packages == 'true') ||
      github.ref_name == 'develop' ||
      github.ref_name == 'main' ||
      github.ref_name == 'master'
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_CODEARTIFACT_ROLE_ARN }}
        role-session-name: GitHubActions-CodeArtifact
        aws-region: us-east-1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get version info from package
      id: package-info
      run: |
        PACKAGE_FILE=$(ls ./packages/*.nupkg | head -n 1)
        if [[ $PACKAGE_FILE == *"-beta"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        echo "package_file=$PACKAGE_FILE" >> $GITHUB_OUTPUT

    - name: Configure CodeArtifact authentication
      run: |
        # Get CodeArtifact authorization token
        CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
          --domain ${{ secrets.AWS_CODEARTIFACT_DOMAIN }} \
          --domain-owner ${{ secrets.AWS_CODEARTIFACT_DOMAIN_OWNER }} \
          --query authorizationToken \
          --output text)

        # Configure NuGet source for CodeArtifact
        CODEARTIFACT_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint \
          --domain ${{ secrets.AWS_CODEARTIFACT_DOMAIN }} \
          --domain-owner ${{ secrets.AWS_CODEARTIFACT_DOMAIN_OWNER }} \
          --repository ${{ secrets.AWS_CODEARTIFACT_REPOSITORY }} \
          --format nuget \
          --query repositoryEndpoint \
          --output text)

        echo "CodeArtifact repository URL: $CODEARTIFACT_REPOSITORY_URL"

        # Add CodeArtifact as NuGet source
        dotnet nuget add source "$CODEARTIFACT_REPOSITORY_URL" \
          --name "aws-codeartifact" \
          --username aws \
          --password "$CODEARTIFACT_AUTH_TOKEN" \
          --store-password-in-clear-text

    - name: Publish to AWS CodeArtifact
      run: |
        for package in ./packages/*.nupkg; do
          echo "Publishing $package to AWS CodeArtifact..."
          dotnet nuget push "$package" \
            --source "aws-codeartifact" \
            --skip-duplicate
        done


